
    Tally: Once all of the voters have indicated all of their preferences, determine, for each pair of candidates, who the preferred candidate is and by what margin they are preferred.
    Sort: Sort the pairs of candidates in decreasing order of strength of victory, where strength of victory is defined to be the number of voters who prefer the preferred candidate.
    Lock: Starting with the strongest pair, go through the pairs of candidates in order and “lock in” each pair to the candidate graph, so long as locking in that pair does not create a cycle in the graph.


1. Für jedes Paar, finde heraus wer gewonnen hat und wie sehr.

    candidates[i] ist eine Liste der Kandidaten

    pair is Int Winner and Int Looser
    pairs is a list of the pair

    preferences[i][j] gibt an wieviele Wähler i besser fanden als  j

    a) Vote
    bekommt j ( Wahlreihe), name (für wen wurde gestimmt) und ranks (Liste die wir updaten müssen)

    Wird für jeden Kandidaten einmal gerufen

    Am Ende soll INT ranks[i] der i-te Wahlwunsch sein

    Tina, John, Chris
    ranks[0] = Nr of TIna
    ranks[1] = Nr of John

    b) record_preferences
    Aus Ranks[x] sollen jetzt John> Tina; John> Chris, Tina > Chris geholt werden

    for every rank i
        fill preferences with [i][j] where j is the number of candidates of a higher rank


ranks[0] = i --> This i is equal to the Candidates i, if 0 it might be John

candidates[John, Mike Sven]
Vote: John, Sven, Mike
ranks[0] = 0
ranks[1] = 2
ranks[2] = 1




2. Sortiere die Paare nach Stärke des Sieges. (Stärke = Anzahl der Wähler die x bevorzugen)


3. Angefangen vom größten Paar, setze die Beziehungen zw den Kandidaten fest, falls sie nicht zu einem kreis führen würden

    locked
