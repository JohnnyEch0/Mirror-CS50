i = 0
j= 0
[0][0]

c -1

k = 0

    l = 0
        cur_x = 0+0-1 = -1
        cur_y = 0+0-1 = -1
        brek
    l = 1
        cur_x = -1
        cur_y = 0
        brek

    l = 2 -same
        cur_x = -1
        cur_y = 1
        brek

k= 1
l= 0
    cur_x = 0+1-1 = 0
    cur_y = 0+0-1 = -1
    brek
l = 1
    cur_x = 0
    cur_y = 0
    arr_neig[0] = copy[0][0]
l = 2
    cur_x = 0+1-1 = 0
    cur_y = 0+2-1 = 1
    arr neig[1] = copy[0][1]


---
i = 15
j = 10

k = 0
l = 0
    cur_x = 15+0-1 = 14
    cur_y = 10+0-1 = 9
    arrneig[0] = copy[14][9]


____
for mid pixel
count += 1 is called 9 times
--> count = 8
--Y arrneig 0-8

for 0++ <= count --> happens 9 times

count+1 (divider) = 9

___


// try: add all and devide

//out:

    // add all the neighbor values, divided by their amount
            for (int neig = 0; neig <= count; neig++)
            {
                colors[0] += round(arr_neig[neig].rgbtBlue / (count+1));
                colors[1] += round(arr_neig[neig].rgbtGreen / (count+1));
                colors[2] += round(arr_neig[neig].rgbtRed / (count+1));
            }

